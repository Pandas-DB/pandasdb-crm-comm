service: pandasdb-crm-comm

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 512
  timeout: 30
  
  environment:
    S3_KNOWLEDGE_BUCKET: !Ref KnowledgeBaseBucket
    S3_KNOWLEDGE_FILE: knowledge/system_prompt.txt
    LEADS_TABLE: !Ref LeadsTable
    CONTACT_METHODS_TABLE: !Ref ContactMethodsTable
    CONTACT_METHOD_SETTINGS_TABLE: !Ref ContactMethodSettingsTable
    ACTIVITIES_TABLE: !Ref ActivitiesTable
    ACTIVITY_CONTENT_TABLE: !Ref ActivityContentTable
    SPAM_ACTIVITIES_TABLE: !Ref SpamActivitiesTable
    STATE_MACHINE_NAME: ${self:service}-${self:provider.stage}-processor
    
    DEFAULT_PLATFORM: whatsapp
    TWILIO_ACCOUNT_SID: ${env:TWILIO_ACCOUNT_SID}
    TWILIO_AUTH_TOKEN: ${env:TWILIO_AUTH_TOKEN}
    TELEGRAM_BOT_TOKEN: ${env:TELEGRAM_BOT_TOKEN, ''}
    
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: arn:aws:logs:*:*:*
        - Effect: Allow
          Action:
            - bedrock:InvokeModel
            - bedrock:ListFoundationModels
            - bedrock:GetFoundationModel
            - bedrock-runtime:InvokeModel
            - bedrock-runtime:InvokeModelWithResponseStream
          Resource: "*" 
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource: 
            - !Join ['', [!GetAtt KnowledgeBaseBucket.Arn, '/*']]
        - Effect: Allow
          Action:
            - states:StartExecution
          Resource: 
            - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${self:service}-${self:provider.stage}-processor"
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource: 
            - !GetAtt LeadsTable.Arn
            - !GetAtt ContactMethodsTable.Arn
            - !GetAtt ContactMethodSettingsTable.Arn
            - !GetAtt ActivitiesTable.Arn
            - !GetAtt ActivityContentTable.Arn
            - !GetAtt SpamActivitiesTable.Arn
            - !Sub "${LeadsTable.Arn}/index/*"
            - !Sub "${ContactMethodsTable.Arn}/index/*"
            - !Sub "${ActivitiesTable.Arn}/index/*"
            - !Sub "${SpamActivitiesTable.Arn}/index/*"

functions: ${file(infra/lambda-functions.yml)}

resources:
  - ${file(infra/dynamodb_schema.yml)}
  - Resources:

      # API Gateway Usage Plan for Rate Limiting
      ApiUsagePlan:
        Type: AWS::ApiGateway::UsagePlan
        Properties:
          UsagePlanName: ${self:service}-${self:provider.stage}-usage-plan
          Description: Usage plan for WhatsApp webhook rate limiting
          ApiStages:
            - ApiId: !Ref ApiGatewayRestApi
              Stage: ${self:provider.stage}
          Throttle:
            RateLimit: 10      # 10 requests per second
            BurstLimit: 20     # 20 concurrent requests max
          Quota:
            Limit: 10000       # 10000 requests per day
            Period: DAY

      CrmApiKey:
        Type: AWS::ApiGateway::ApiKey
        Properties:
          Name: ${self:service}-${self:provider.stage}-api-key
          Description: API Key for CRM Communication System
          Enabled: true

      ApiUsagePlanKey:
        Type: AWS::ApiGateway::UsagePlanKey
        DependsOn:
          - CrmApiKey
          - ApiUsagePlan
        Properties:
          KeyId: !Ref CrmApiKey
          KeyType: API_KEY
          UsagePlanId: !Ref ApiUsagePlan

      # S3 Bucket for Knowledge Base
      KnowledgeBaseBucket:
        Type: AWS::S3::Bucket
        Properties:
          PublicAccessBlockConfiguration:
            BlockPublicAcls: true
            BlockPublicPolicy: true
            IgnorePublicAcls: true
            RestrictPublicBuckets: true
          VersioningConfiguration:
            Status: Enabled
          BucketEncryption:
            ServerSideEncryptionConfiguration:
              - ServerSideEncryptionByDefault:
                  SSEAlgorithm: AES256
      
      # IAM Role for Step Functions
      StepFunctionsRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service: states.amazonaws.com
                Action: sts:AssumeRole
          Policies:
            - PolicyName: StepFunctionsExecutionPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - lambda:InvokeFunction
                    Resource:
                      - !GetAtt CheckContentLambdaFunction.Arn
                      - !GetAtt GetOrCreateLeadLambdaFunction.Arn
                      - !GetAtt CheckLeadSpammerLambdaFunction.Arn
                      - !GetAtt DetectSpamLambdaFunction.Arn
                      - !GetAtt CreateActivityLambdaFunction.Arn
                      - !GetAtt GenerateResponseLambdaFunction.Arn
                      - !GetAtt GenerateSpamResponseLambdaFunction.Arn
                      - !GetAtt SendMessageLambdaFunction.Arn

      # Step Functions State Machine
      WhatsAppStateMachine:
        Type: AWS::StepFunctions::StateMachine
        Properties:
          StateMachineName: ${self:service}-${self:provider.stage}-processor
          RoleArn: !GetAtt StepFunctionsRole.Arn
          Definition: ${file(infra/step-function-definition.yml)}

  - Outputs:
      WhatsAppWebhookUrl:
        Description: "Webhook URL for Twilio WhatsApp"
        Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/whatsapp"
      
      TelegramWebhookUrl:
        Description: "Webhook URL for Telegram"
        Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/telegram"
      
      ChatApiUrl:
        Description: "API URL for Chat"
        Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/chat"

      KnowledgeBaseBucket:
        Description: "S3 Bucket for Knowledge Base"
        Value: !Ref KnowledgeBaseBucket
      
      StateMachineArn:
        Description: "Step Functions State Machine ARN"
        Value: !Ref WhatsAppStateMachine

plugins:
  - serverless-dotenv-plugin
  - serverless-step-functions
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
    slim: true
    strip: false
