service: pandasdb-crm-comm

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 512
  timeout: 30
  
  environment:
    S3_KNOWLEDGE_BUCKET: !Ref KnowledgeBaseBucket
    S3_KNOWLEDGE_FILE: knowledge/system_prompt.txt
    LEADS_TABLE: !Ref LeadsTable
    CONTACT_METHODS_TABLE: !Ref ContactMethodsTable
    CONTACT_METHOD_SETTINGS_TABLE: !Ref ContactMethodSettingsTable
    ACTIVITIES_TABLE: !Ref ActivitiesTable
    ACTIVITY_CONTENT_TABLE: !Ref ActivityContentTable
    SPAM_ACTIVITIES_TABLE: !Ref SpamActivitiesTable
    STATE_MACHINE_NAME: ${self:service}-${self:provider.stage}-processor
    
    DEFAULT_PLATFORM: whatsapp
    TWILIO_ACCOUNT_SID: ${env:TWILIO_ACCOUNT_SID}
    TWILIO_AUTH_TOKEN: ${env:TWILIO_AUTH_TOKEN}
    TELEGRAM_BOT_TOKEN: ${env:TELEGRAM_BOT_TOKEN, ''}
    
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: arn:aws:logs:*:*:*
        - Effect: Allow
          Action:
            - bedrock:InvokeModel
            - bedrock:ListFoundationModels
            - bedrock:GetFoundationModel
            - bedrock-runtime:InvokeModel
            - bedrock-runtime:InvokeModelWithResponseStream
          Resource: "*" 
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource: 
            - !Join ['', [!GetAtt KnowledgeBaseBucket.Arn, '/*']]
        - Effect: Allow
          Action:
            - states:StartExecution
          Resource: 
            - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${self:service}-${self:provider.stage}-processor"
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource: 
            - !GetAtt LeadsTable.Arn
            - !GetAtt ContactMethodsTable.Arn
            - !GetAtt ContactMethodSettingsTable.Arn
            - !GetAtt ActivitiesTable.Arn
            - !GetAtt ActivityContentTable.Arn
            - !GetAtt SpamActivitiesTable.Arn
            - !Sub "${LeadsTable.Arn}/index/*"
            - !Sub "${ContactMethodsTable.Arn}/index/*"
            - !Sub "${ActivitiesTable.Arn}/index/*"
            - !Sub "${SpamActivitiesTable.Arn}/index/*"
  
  apiKeys:
    - name: ${self:service}-${self:provider.stage}-api-key

functions: ${file(lambda-functions.yml)}

resources:
  Resources:

    # API Gateway Usage Plan for Rate Limiting
    ApiUsagePlan:
      Type: AWS::ApiGateway::UsagePlan
      Properties:
        UsagePlanName: ${self:service}-${self:provider.stage}-usage-plan
        Description: Usage plan for WhatsApp webhook rate limiting
        ApiStages:
          - ApiId: !Ref ApiGatewayRestApi
            Stage: ${self:provider.stage}
        Throttle:
          RateLimit: 10      # 10 requests per second
          BurstLimit: 20     # 20 concurrent requests max
        Quota:
          Limit: 10000       # 86400 requests per day (optional)
          Period: DAY

    # DynamoDB Tables
    LeadsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-leads
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    
    ContactMethodsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-contact-methods
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: lead_id
            AttributeType: S
          - AttributeName: type_value
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: lead-id-index
            KeySchema:
              - AttributeName: lead_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: type-value-index
            KeySchema:
              - AttributeName: type_value
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    
    ContactMethodSettingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-contact-method-settings
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: contact_method_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: contact-method-id-index
            KeySchema:
              - AttributeName: contact_method_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    
    ActivitiesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-activities
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: lead_id
            AttributeType: S
          - AttributeName: created_at
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: lead-id-created-at-index
            KeySchema:
              - AttributeName: lead_id
                KeyType: HASH
              - AttributeName: created_at
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    
    ActivityContentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-activity-content
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: activity_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: activity-id-index
            KeySchema:
              - AttributeName: activity_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    
    SpamActivitiesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-spam-activities
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: lead_id
            AttributeType: S
          - AttributeName: spam_date
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: lead-id-spam-date-index
            KeySchema:
              - AttributeName: lead_id
                KeyType: HASH
              - AttributeName: spam_date
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    # S3 Bucket for Knowledge Base
    KnowledgeBaseBucket:
      Type: AWS::S3::Bucket
      Properties:
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        VersioningConfiguration:
          Status: Enabled
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
    
    # IAM Role for Step Functions
    StepFunctionsRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: states.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: StepFunctionsExecutionPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource:
                    - !GetAtt CheckContentLambdaFunction.Arn
                    - !GetAtt CheckPhoneSpammerLambdaFunction.Arn
                    - !GetAtt DetectSpamLambdaFunction.Arn
                    - !GetAtt GenerateSpamResponseLambdaFunction.Arn
                    - !GetAtt GenerateAiResponseLambdaFunction.Arn
                    - !GetAtt SendMessageLambdaFunction.Arn

    # Step Functions State Machine
    WhatsAppStateMachine:
      Type: AWS::StepFunctions::StateMachine
      Properties:
        StateMachineName: ${self:service}-${self:provider.stage}-processor
        RoleArn: !GetAtt StepFunctionsRole.Arn
        Definition: ${file(step-function-definition.yml)}

  Outputs:
    WebhookUrl:
      Description: "Webhook URL for Twilio"
      Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/webhook/whatsapp"
    
    LeadsApiUrl:
      Description: "API URL for Lead Management"
      Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/api/leads"
    
    KnowledgeBaseBucket:
      Description: "S3 Bucket for Knowledge Base"
      Value: !Ref KnowledgeBaseBucket
    
    StateMachineArn:
      Description: "Step Functions State Machine ARN"
      Value: !Ref WhatsAppStateMachine

plugins:
  - serverless-dotenv-plugin
  - serverless-step-functions
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
    slim: true
    strip: false
