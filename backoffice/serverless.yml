service: pandasdb-crm-comm-backoffice

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 512
  timeout: 30
  
  environment:
    # Direct table names using same naming convention as main stack
    LEADS_TABLE: ${self:custom.mainStackName}-leads
    CONTACT_METHODS_TABLE: ${self:custom.mainStackName}-contact-methods
    CONTACT_METHOD_SETTINGS_TABLE: ${self:custom.mainStackName}-contact-method-settings
    ACTIVITIES_TABLE: ${self:custom.mainStackName}-activities
    ACTIVITY_CONTENT_TABLE: ${self:custom.mainStackName}-activity-content
    SPAM_ACTIVITIES_TABLE: ${self:custom.mainStackName}-spam-activities
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: arn:aws:logs:*:*:*
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource: 
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.mainStackName}-leads"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.mainStackName}-contact-methods"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.mainStackName}-contact-method-settings"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.mainStackName}-activities"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.mainStackName}-activity-content"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.mainStackName}-spam-activities"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.mainStackName}-leads/index/*"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.mainStackName}-contact-methods/index/*"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.mainStackName}-contact-method-settings/index/*"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.mainStackName}-activities/index/*"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.mainStackName}-activity-content/index/*"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.mainStackName}-spam-activities/index/*"

functions:
  # Lead Management
  createLead:
    handler: handlers/create_lead.lambda_handler
    events:
      - http:
          path: api/leads
          method: post
          cors: true
          private: true  # Requires API key
  
  listLeads:
    handler: handlers/list_leads.lambda_handler
    events:
      - http:
          path: api/leads
          method: get
          cors: true
          private: true  # Requires API key
  
  getLeadDetails:
    handler: handlers/get_lead_details.lambda_handler
    events:
      - http:
          path: api/lead/{lead_id}
          method: get
          cors: true
          private: true  # Requires API key
  
  # Analytics
  getDailyAnalytics:
    handler: handlers/get_daily_analytics.lambda_handler
    events:
      - http:
          path: api/analytics/daily
          method: get
          cors: true
          private: true  # Requires API key
  
  getSpamActivities:
    handler: handlers/get_spam_activities.lambda_handler
    events:
      - http:
          path: api/spam/activities
          method: get
          cors: true
          private: true  # Requires API key
  
  getSpamUsers:
    handler: handlers/get_spam_users.lambda_handler
    events:
      - http:
          path: api/spam/users
          method: get
          cors: true
          private: true  # Requires API key

  removeSpamActivities:
    handler: handlers/remove_spam_activities.lambda_handler
    events:
      - http:
          path: api/spam/activities/{lead_id}
          method: delete
          cors: true
          private: true  # Requires API key

custom:
  mainStackName: pandasdb-crm-comm-${self:provider.stage}
  pythonRequirements:
    dockerizePip: true
    slim: true
    strip: false

resources:
  Resources:
    # API Key for Backoffice Access
    BackofficeApiKey:
      Type: AWS::ApiGateway::ApiKey
      Properties:
        Name: ${self:service}-${self:provider.stage}-api-key
        Description: Auto-generated API Key for Backoffice Access
        Enabled: true
        Value: !Sub '${AWS::StackName}-${AWS::AccountId}-${AWS::Region}-${self:provider.stage}'

    # Usage Plan for Rate Limiting and API Key Management
    BackofficeUsagePlan:
      Type: AWS::ApiGateway::UsagePlan
      Properties:
        UsagePlanName: ${self:service}-${self:provider.stage}-usage-plan
        Description: Usage plan for Backoffice API with rate limiting
        ApiStages:
          - ApiId: !Ref ApiGatewayRestApi
            Stage: ${self:provider.stage}
        Throttle:
          RateLimit: 100      # 100 requests per second
          BurstLimit: 200     # 200 concurrent requests max
        Quota:
          Limit: 10000        # 10000 requests per day
          Period: DAY

    # Link API Key to Usage Plan
    BackofficeUsagePlanKey:
      Type: AWS::ApiGateway::UsagePlanKey
      DependsOn:
        - BackofficeApiKey
        - BackofficeUsagePlan
      Properties:
        KeyId: !Ref BackofficeApiKey
        KeyType: API_KEY
        UsagePlanId: !Ref BackofficeUsagePlan

    # S3 Bucket for Backoffice Frontend
    BackofficeBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
              AllowedOrigins: ['*']
              MaxAge: 3600
    
    # S3 Bucket Policy for CloudFront Access
    BackofficeBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref BackofficeBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: AllowCloudFrontServicePrincipal
              Effect: Allow
              Principal:
                Service: cloudfront.amazonaws.com
              Action: s3:GetObject
              Resource: !Sub "${BackofficeBucket}/*"
              Condition:
                StringEquals:
                  'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${BackofficeDistribution}'
    
    # CloudFront Origin Access Control (replaces deprecated OriginAccessIdentity)
    BackofficeOriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:
        OriginAccessControlConfig:
          Name: !Sub '${self:service}-${self:provider.stage}-oac'
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4
          Description: !Sub 'OAC for ${self:service}-${self:provider.stage}'
    
    # CloudFront Distribution for Global CDN
    BackofficeDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Comment: !Sub 'CDN for ${self:service}-${self:provider.stage}'
          DefaultRootObject: index.html
          PriceClass: PriceClass_100  # Use only North America and Europe edge locations
          
          Origins:
            - Id: BackofficeS3Origin
              DomainName: !GetAtt BackofficeBucket.RegionalDomainName
              S3OriginConfig:
                OriginAccessIdentity: ''
              OriginAccessControlId: !Ref BackofficeOriginAccessControl
          
          DefaultCacheBehavior:
            TargetOriginId: BackofficeS3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS]
            CachedMethods: [GET, HEAD]
            Compress: true
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # Managed-CachingDisabled
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # Managed-CORS-S3Origin
          
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
              ErrorCachingMinTTL: 300
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
              ErrorCachingMinTTL: 300
          
          HttpVersion: http2
          IPV6Enabled: true

  Outputs:
    BackofficeUrl:
      Description: "Backoffice Frontend URL"
      Value: !Sub "https://${BackofficeDistribution.DomainName}"
      Export:
        Name: ${self:service}-${self:provider.stage}-BackofficeUrl
    
    BackofficeBucket:
      Description: "S3 Bucket for Backoffice Frontend"
      Value: !Ref BackofficeBucket
      Export:
        Name: ${self:service}-${self:provider.stage}-BackofficeBucket
    
    BackofficeDistributionId:
      Description: "CloudFront Distribution ID"
      Value: !Ref BackofficeDistribution
      Export:
        Name: ${self:service}-${self:provider.stage}-BackofficeDistributionId
    
    BackofficeApiUrl:
      Description: "Backoffice API URL"
      Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
      Export:
        Name: ${self:service}-${self:provider.stage}-BackofficeApiUrl

    BackofficeApiKey:
      Description: "Auto-generated API Key for Backoffice Access"
      Value: !Ref BackofficeApiKey
      Export:
        Name: ${self:service}-${self:provider.stage}-BackofficeApiKey

    BackofficeApiKeyValue:
      Description: "API Key Value for Frontend Configuration"
      Value: !Sub '${AWS::StackName}-${AWS::AccountId}-${AWS::Region}-${self:provider.stage}'
      Export:
        Name: ${self:service}-${self:provider.stage}-BackofficeApiKeyValue

plugins:
  - serverless-python-requirements
